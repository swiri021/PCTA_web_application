# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-12-20 00:51
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExprInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entrez_id', models.IntegerField()),
                ('sample_id', models.IntegerField()),
                ('value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'expr_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeneInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entrez_id', models.IntegerField()),
                ('symbol', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'gene_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MajorGrade',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('gleason', models.IntegerField(blank=True, null=True)),
                ('disease_status', models.CharField(blank=True, max_length=10, null=True)),
                ('hormone_response', models.CharField(blank=True, max_length=10, null=True)),
                ('n_category', models.CharField(blank=True, max_length=100, null=True)),
                ('pcs', models.CharField(blank=True, db_column='PCS', max_length=100, null=True)),
                ('pam50', models.CharField(blank=True, db_column='pam50', max_length=100, null=True)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'major_grade',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MedInfo',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
                ('sampling_site', models.CharField(blank=True, max_length=200, null=True)),
                ('histology', models.CharField(blank=True, max_length=200, null=True)),
                ('invasiveness', models.CharField(blank=True, max_length=10, null=True)),
                ('hormone_response', models.CharField(blank=True, max_length=10, null=True)),
                ('tumor_content', models.IntegerField(blank=True, null=True)),
                ('stromal_content', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'med_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MinorGrade',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('stage', models.IntegerField(blank=True, null=True)),
                ('grade', models.IntegerField(blank=True, null=True)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'minor_grade',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MutStatusTable',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ets_expr', models.CharField(blank=True, max_length=100, null=True)),
                ('egfr_mutation', models.CharField(blank=True, max_length=100, null=True)),
                ('egfr_expr', models.CharField(blank=True, max_length=100, null=True)),
                ('fusion', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'mut_status_table',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PathwayGenes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pathway_name', models.CharField(blank=True, max_length=300, null=True)),
                ('entrez_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pathway_genes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PathwayInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pathway_id', models.IntegerField(blank=True, null=True)),
                ('pathway_name', models.CharField(blank=True, max_length=300, null=True)),
                ('source1', models.CharField(blank=True, max_length=200, null=True)),
                ('source2', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'pathway_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PsaInfo',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('psa_recurrence_month', models.IntegerField(blank=True, null=True)),
                ('psa_recurrence_status', models.CharField(blank=True, max_length=10, null=True)),
                ('psa_level', models.FloatField(blank=True, null=True)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'psa_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TimeInfo',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('survival_month', models.IntegerField(blank=True, null=True)),
                ('survival_status', models.CharField(blank=True, max_length=10, null=True)),
                ('recurrence_month', models.IntegerField(blank=True, null=True)),
                ('recurrence_status', models.CharField(blank=True, max_length=10, null=True)),
                ('sample_original_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'time_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('username', models.EmailField(db_column='user_ID', max_length=255, primary_key=True, serialize=False)),
                ('org', models.CharField(blank=True, max_length=300, null=True)),
                ('password1', models.CharField(blank=True, db_column='passwd', max_length=300)),
            ],
            options={
                'db_table': 'user_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
